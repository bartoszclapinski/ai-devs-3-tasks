import streamlit as st
from ui.views.base_view import BaseView
from .components.console import Console
from .components.task_info import TaskInfo
from tasks.week1.episode01.robot_login.models.robot import RobotLoginAutomation
from services.llm.llm_factory import LLMFactory

class RobotLoginView(BaseView):
    def __init__(self):
        self.console = Console()
        self.task_info = TaskInfo()

    def show(self):
        # Style dla ca≈Çego komponentu
        st.markdown("""
            <style>
            .block-container {
                padding-top: 0rem !important;
            }
            
            /* Style dla zak≈Çadek */
            .stTabs [data-baseweb="tab-list"] {
                gap: 2px !important;
                padding: 0 !important;
            }
            
            .stTabs [data-baseweb="tab"] {
                height: 50px !important;
                padding: 10px 20px !important;
                border-bottom: 3px solid transparent !important;
                background-color: transparent !important;
            }
            
            /* Aktywna zak≈Çadka */
            .stTabs [data-baseweb="tab"][aria-selected="true"] {
                background-color: transparent !important;
                border-bottom: 2px solid #2e7d32 !important;
                position: relative !important;
                z-index: 1000 !important;
            }
            
            /* Dodaj w≈Çasne podkre≈õlenie */
            .stTabs [data-baseweb="tab"][aria-selected="true"]::after {
                content: '' !important;
                position: absolute !important;
                bottom: 0 !important;
                left: 0 !important;
                width: 100% !important;
                height: 2px !important;
                background-color: #2e7d32 !important;
                z-index: 1001 !important;
            }
            
            .stTabs [data-baseweb="tab"][aria-selected="true"] [data-testid="stMarkdownContainer"] p {
                color: #2e7d32 !important;
                font-weight: bold !important;
            }
            
            /* Usu≈Ñ czerwone podkre≈õlenie */
            .stTabs [data-baseweb="tab-border"] {
                display: none !important;
                visibility: hidden !important;
                opacity: 0 !important;
                height: 0 !important;
                pointer-events: none !important;
            }

            /* Style dla sekcji implementacji */
            div[data-testid="stVerticalBlock"] > div > .implementation-wrapper {
                max-width: 40% !important;
            }
            
            div[data-testid="stVerticalBlock"] > div > .implementation-wrapper p,
            div[data-testid="stVerticalBlock"] > div > .implementation-wrapper h3 {
                max-width: 100% !important;
            }

            /* Style dla selectboxa i przycisku */
            .implementation-section {
                width: 300px !important;
            }
            
            /* Zmniejsz odstƒôp miƒôdzy selectboxem a przyciskiem */
            .stButton {
                margin-top: 0.5rem !important;
            }
            
            /* Dostosuj szeroko≈õƒá selectboxa dla wyboru modelu */
            div[data-testid="stFormSelect"] div[data-baseweb="select"] {
                width: 300px !important;
            }
            
            /* Kontener selectboxa */
            div[data-baseweb="select"] {
                width: 300px !important;
            }
            
            /* Specyficzne style dla wyboru modelu LLM */
            label:contains("Wybierz model LLM") + div [data-baseweb="select"] {
                width: 300px !important;
            }
            
            /* Przycisk */
            .stButton > button {
                width: 180px !important;
            }
            
            /* Ca≈Çkowicie usu≈Ñ domy≈õlne style zak≈Çadek */
            .stTabs [data-baseweb="tab-highlight"] {
                display: none !important;
                visibility: hidden !important;
                opacity: 0 !important;
                height: 0 !important;
                pointer-events: none !important;
            }
            
            .stTabs [data-baseweb="tab-border"] {
                display: none !important;
                visibility: hidden !important;
                opacity: 0 !important;
                height: 0 !important;
                pointer-events: none !important;
            }
            
            /* Wzmocnij style dla aktywnej zak≈Çadki */
            .stTabs [data-baseweb="tab"][aria-selected="true"] {
                background-color: transparent !important;
                border-bottom: 3px solid #2e7d32 !important;
                position: relative !important;
                z-index: 1000 !important;
            }
            
            /* Dodaj w≈Çasne podkre≈õlenie */
            .stTabs [data-baseweb="tab"][aria-selected="true"]::after {
                content: '' !important;
                position: absolute !important;
                bottom: 0 !important;
                left: 0 !important;
                width: 100% !important;
                height: 3px !important;
                background-color: #2e7d32 !important;
                z-index: 1001 !important;
            }

            /* Style dla przycisk√≥w */
            .stButton > button {
                background-color: #2e7d32 !important;
                border-color: #2e7d32 !important;
                color: white !important;
                width: 300px !important;
            }
            
            .stButton > button:hover {
                background-color: #1b5e20 !important;
                border-color: #1b5e20 !important;
                color: white !important;
            }
            
            /* Style dla selectboxa tylko w sekcji implementacji */
            .implementation-section div[data-testid="stFormSelect"] div[data-baseweb="select"] {
                width: 180px !important;
            }
            
            /* Kontener selectboxa tylko w sekcji implementacji */
            .implementation-section div[data-baseweb="select"] {
                width: 180px !important;
            }
            
            /* Specyficzne style dla wyboru modelu LLM tylko w sekcji implementacji */
            .implementation-section label:contains("Wybierz model LLM") + div [data-baseweb="select"] {
                width: 180px !important;
            }

            /* Style dla zak≈Çadek i separatora */
            .stTabs {
                max-width: 800px !important;
            }
            
            /* Separator */
            hr.separator {
                max-width: 800px !important;
                margin-left: 0 !important;
            }
            
            /* Kontener zak≈Çadek */
            div[data-testid="stTabs"] > div[role="tablist"] {
                max-width: 100% !important;
            }
            
            /* Zawarto≈õƒá zak≈Çadek */
            div[data-testid="stTabs"] > div[role="tabpanel"] {
                max-width: 100% !important;
            }

            /* Sekcja implementacji */
            .implementation-wrapper {
                max-width: 800px !important;
            }

            /* Style dla checkboxa */
            [data-testid="stCheckbox"] {
                color: #2e7d32 !important;
            }
            
            /* Kolor znacznika i obramowania */
            [data-testid="stCheckbox"] > label > div[role="checkbox"] {
                border-color: rgba(46, 125, 50, 0.4) !important;
            }
            
            /* Kolor znacznika po zaznaczeniu */
            [data-testid="stCheckbox"] > label > div[role="checkbox"][aria-checked="true"] {
                background-color: #2e7d32 !important;
                border-color: #2e7d32 !important;
            }
            
            /* Kolor obramowania przed zaznaczeniem */
            [data-testid="stCheckbox"] > label > div[role="checkbox"]:not([aria-checked="true"]) {
                border-color: rgba(46, 125, 50, 0.4) !important;
            }
            
            /* Hover na checkboxie */
            [data-testid="stCheckbox"] > label > div[role="checkbox"]:hover {
                border-color: #2e7d32 !important;
            }
            </style>
        """, unsafe_allow_html=True)

        self.render_header("Week 1 - Episode 1 - Robot Login")
        
        st.markdown("### Cel zadania:")
        st.markdown("Zalogowaƒá siƒô do systemu robot√≥w i pobraƒá firmware.")

        # Tworzenie zak≈Çadek
        tab1, tab2, tab3 = st.tabs(["üìã Wymagania", "üí° RozwiƒÖzanie", "üìù Tre≈õƒá zadania"])
        
        with tab1:
            st.markdown("""                            
                Obej≈õƒá system anty-captcha poprzez:
                - Pobranie aktualnego pytania ze strony (zmienia siƒô co 7 sekund)
                - Wys≈Çanie pytania do LLM w celu uzyskania odpowiedzi
                - Wys≈Çanie formularza z danymi logowania i odpowiedziƒÖ           
            """)
        
        with tab2:
            st.markdown("""
            ### Implementacja:
            
            1. **Przygotowanie zapytania**
                - Tworzymy sesjƒô HTTP do komunikacji z serwerem
                - Pobieramy stronƒô logowania i wyciƒÖgamy pytanie captcha
                
            2. **Obs≈Çuga captcha**
                - Wysy≈Çamy pytanie do modelu LLM
                - Otrzymujemy odpowied≈∫ i formatujemy jƒÖ zgodnie z wymaganiami
                
            3. **Logowanie**
                - Wysy≈Çamy formularz z danymi logowania i odpowiedziƒÖ captcha
                - Weryfikujemy odpowied≈∫ serwera
                
            4. **Pobranie firmware**
                - Po udanym logowaniu pobieramy firmware
                - Zapisujemy odpowied≈∫ do pliku
            """)
        
        with tab3:
            st.markdown("""
            ### Zadanie

            Zaloguj siƒô do systemu robot√≥w pod adresem xyz.ag3nts.org. Zdobyli≈õmy login i has≈Ço do systemu (tester / 574e112a). 
            Problemem jednak jest ich system 'anty-captcha', kt√≥ry musisz spr√≥bowaƒá obej≈õƒá. Musisz jedynie zautomatyzowaƒá proces 
            odpowiadania na pytnie zawarte w formularzu. Przy okazji zaloguj siƒô proszƒô w naszej centrali (centrala.ag3nts.org). 
            Tam te≈º mo≈ºesz zg≈Çosiƒá wszystkie znalezione do tej pory flagi. Nie analizuj jeszcze pamiƒôci robota, kt√≥rƒÖ przechwycisz. 
            Zostawmy sobie to na jutro.

            ### Co musisz zrobiƒá w zadaniu?

            1. Zbadaj formularz logowania do podanej wy≈ºej strony (XYZ) i zauwa≈º, ≈ºe wysy≈Çane sƒÖ tam trzy zmienne metodƒÖ POST: 
               username, password oraz answer. Zawarto≈õƒá dw√≥ch pierwszych ju≈º znasz. Trzecia wymaga uzupe≈Çnienia

            2. Napisz prostƒÖ aplikacjƒô, kt√≥ra pobiera aktualne pytanie wy≈õwietlane na stronie (zmienia siƒô ono co 7 sekund)

            3. Wy≈õlij to pytanie do wybranego LLM-a i pobierz odpowied≈∫

            4. Wy≈õlij trzy zmienne z pkt #1 do strony XYZ, uzupe≈ÇniajƒÖc pole answer odpowiedziƒÖ z LLM-a

            5. Odczytaj odpowied≈∫ serwera. Bƒôdzie tam podany adres URL do tajnej podstrony. Przejd≈∫ tam.
            """)

        # Dodajemy separator
        st.markdown("<hr class='separator'>", unsafe_allow_html=True)
        
        # U≈ºywamy kolumn do kontroli szeroko≈õci
        col1, col2 = st.columns([2, 3])  # Proporcja 2:3 da nam oko≈Ço 40% szeroko≈õci
        
        with col1:
            st.markdown("### Implementacja rozwiƒÖzania:")
            st.markdown("""
            RozwiƒÖzanie automatycznie wykonuje wszystkie kroki wymagane do zalogowania siƒô do systemu robot√≥w 
            i pobrania firmware'u. Program obs≈Çuguje system anty-captcha poprzez wykorzystanie modelu LLM 
            do generowania odpowiedzi na pytania.
            """)

            # Kontener dla selectboxa i przycisku
            st.markdown('<div class="implementation-section">', unsafe_allow_html=True)
            
            # Checkbox do kontroli u≈ºycia cache'a
            use_cache = st.checkbox("U≈ºyj pamiƒôci cache", value=True, 
                                   help="Je≈õli zaznaczone, program bƒôdzie u≈ºywa≈Ç wcze≈õniej zapisanych poprawnych odpowiedzi")
            
            # Wyb√≥r modelu
            selected_model = st.selectbox(
                "Wybierz model LLM:",
                LLMFactory.get_available_models(),
                index=0
            )
            
            # Przycisk uruchomienia
            if st.button("üöÄ Uruchom rozwiƒÖzanie", key="episode1_task", type="primary"):
                self._run_task(selected_model, use_cache)
                
            st.markdown('</div>', unsafe_allow_html=True)

    def _run_task(self, model_name: str, use_cache: bool):
        with st.spinner("Running robot login automation..."):
            automation = RobotLoginAutomation(model_name)
            # Je≈õli cache wy≈ÇƒÖczony, tymczasowo wyczy≈õƒá pamiƒôƒá
            if not use_cache:
                automation.qa_memory.clear_memory()
            success = automation.login(callback=self.console.log)
            
            if success:
                st.markdown("""
                    <style>
                    div[data-testid="stNotification"] {
                        justify-content: center;
                    }
                    div[data-testid="stNotification"] > div {
                        text-align: center;
                    }
                    </style>
                """, unsafe_allow_html=True)
                st.success("Task completed successfully!")
            else:
                st.error("Task failed!") 