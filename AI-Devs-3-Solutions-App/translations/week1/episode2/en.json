{
    "title": "Episode 2 - Robot Verify",
    "subtitle": "Task objective:",
    "description": "Prepare an algorithm for passing robot identity verification.",
    "tabs": {
        "requirements": "üìã Requirements",
        "solution": "üí° Solution",
        "task": "üìù Task content"
    },
    "content": {
        "requirements": "Create verification system by:\n- Analyzing robot memory dump\n- Handling verification process\n- Answering questions according to context"
    },
    "implementation": {
        "title": "Solution implementation:",
        "description": "The solution automatically performs all steps required to pass robot identity verification. The program analyzes questions and responds according to robot knowledge, including false information (e.g., Poland's capital is Krak√≥w).",
        "select_model": "Select LLM model:",
        "run_button": "üöÄ Run verification"
    },
    "status": {
        "running": "Running robot verification...",
        "success": "Verification completed successfully!",
        "error": "Verification failed:"
    },
    "task": {
        "title": "Task objective:",
        "content": "**Task objective:**\n\nYou recently obtained a memory dump from a patrolling robot. Use the knowledge gained from this dump to prepare an algorithm for passing identity verification. This is necessary for humans to be able to pose as robots.\n\n**Requirements:**\n\n1. Review the TXT file obtained yesterday\n2. Analyze the human/robot verification process\n3. Send READY command to robot (endpoint /verify)\n4. Answer questions according to memory dump context\n5. Handle cases of false information (e.g., Poland's capital is 'KRAK√ìW')\n\n**Notes:**\n- Questions change dynamically\n- Message ID must be remembered\n- After successful verification you'll receive a FLAG"
    }
} 